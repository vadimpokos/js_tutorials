// console.log("1" + 2 + 0) //'120' произошла конкатенация строк
// console.log("1" - 1 + 2) // 2 потому что знак минуса приводит типы к числу
// console.log(true +  false) // 1 потому что знак плюса привёл значения к числам
// console.log(10 / "5") // 2 потому что / это математический оператор, а они приводят всё к числам
// console.log("2" * "3") // 6, тоже самое что и в примере выше
// console.log(4 + 5 + "px") // '9px' потому что выражение считается слева направо поочереди и сразу выполняется сложение 2-х чисел, а потом уже числа 9 и строки
// console.log("$" + 4 + 5) // '$45' '$' + 4 --> '$4' ; '$4' + 5 --> '$45'
// console.log("42" - 2) // 40 потому что минус приводит все типы к числам
// console.log("4px" - 2) //NaN потому что минус пытается привести типы к числам, а NaN является числом, но говорит о невозможности выполнения матем. операции
// console.log(7 / 0) // Infinity потому что JS интерпритирует выражение математически верно и 0 на самом деле это бесконечно малое число, а деление числа на бесконечно малое число в результате даёт бесконечно большое число
// console.log("-9 \n" + 5) //'-9
                            //5' потому что наличие в выражении + и строки вызывает конкатенацию строк, а \n переводит строку на новую строчку

// console.log("-9 \n" - 5) //-14 потому что минус приводит типы выражения к числам, хвосты из пробелов и знаков переноса отсекаются
// console.log(5 && 2) // все условия true, "и" вывело последний
// console.log(2 && 5) // все условия true, "и" вывело последний
// console.log(5 || 0) // или находит первое истинное значение
// console.log(0 || 5) // или находит первое истинное значение (0 ~ false)
// console.log(null + 1) // 1 потому что здесь null приводится к числу и становится 0, 0+1=1
// console.log(undefined + 1) // NaN потому что матем операция невыполнима
// console.log(null == "\n0\n") // нестрогое равенство, в этом случае null равен только undefined
// console.log(+null == +"\n0\n") // явно преобразованы типы